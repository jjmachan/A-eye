# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_Models.ipynb (unless otherwise specified).

__all__ = ['device', 'EncoderRNN', 'DecoderRNN']

# Cell
import random

import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

device = torch.device('cpu' if torch.cuda.is_available() else 'cpu')

# Cell
class EncoderRNN(nn.Module):
    def __init__(self, input_size, hidden_size, n_features, n_out_features):
        super(EncoderRNN, self).__init__()
        self.hidden_size = hidden_size

        self.embeddings = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size)
        self.fc = nn.Linear(self.hidden_size + n_features, n_out_features)

    def forward(self, img, input, hidden):
        embedded = self.embeddings(input)
        output = embedded

        # format img to feed into fc layer
        n = sent.size(0)
        img = torch.from_numpy(np.tile(img, (n, 1)))
        img = torch.unsqueeze(img, 1)

        # feed into fc layer
        output = torch.cat((img, output), dim=-1)
        output = F.relu(self.fc(output))

        output, hidden = self.gru(output, hidden)
        return output, hidden
    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)


# Cell
class DecoderRNN(nn.Module):
    def __init__(self, hidden_size, output_size):
        super(DecoderRNN, self).__init__()
        self.hidden_size = hidden_size

        self.embeddings = nn.Embedding(output_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size)
        self.out = nn.Linear(hidden_size, output_size)
        self.softmax = nn.LogSoftmax(dim=1)

    def forward(self, input, hidden):
        output = self.embeddings(input).view(1, 1, -1)
        output = F.relu(output)
        output, hidden = self.gru(output, hidden)
        output = self.softmax(self.out(output))
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)